namespace cdm.product.template
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.asset.common.*

import cdm.product.asset.*
import cdm.product.common.settlement.*
/*
 * Function Specifications for Equity Swap product creation
 * 
 * These should be implementation-specific, and exist in implementors' "private" extensions of the CDM rather than the public CDM
 * They are positioned here for illustration of the equity workflow as part of the CDM, until such time when they could be deemed to be moved
 * 
 */
func NewEquitySwapProduct: <"Function specification to create an Equity Swap according to the 2018 ISDA CDM Equity Confirmation Template, based on a minimum set of inputs which can (optionally) include a Master Confirmation Agreement. The inputs represent the minimum set of inputs required to create an Equity Swap, either based on an existing Master Confirmation Agreement or as a stand-alone Equity Swap">
	inputs:
		security Security (1..1) <"The underlying Equity asset for the swap.">
		masterConfirmation EquitySwapMasterConfirmation2018 (0..1) <"An (optional) pointer to the Master Confirmation Agreement, if any, that holds further inputs to the Equity Swap">

	output:
		product Product (1..1)

	alias payout:
		product -> contractualProduct -> economicTerms -> payout

	condition: <"Security must be equity (single name).">
		security -> securityType = SecurityTypeEnum -> Equity


	assign-output product -> contractualProduct -> economicTerms -> payout -> equityPayout:
		NewSingleNameEquityPayout(security, masterConfirmation)

	assign-output product -> contractualProduct -> economicTerms -> payout -> interestRatePayout: <"Equity and interest rate payouts must be set-up according to their corresponding payout specifications">
		if masterConfirmation exists then NewFloatingPayout(masterConfirmation)

	post-condition: <"Other payout types must be absent.">
		if masterConfirmation is absent then payout -> interestRatePayout is absent
			and payout -> cashflow is absent
			and payout -> creditDefaultPayout is absent
			and payout -> forwardPayout is absent
			and payout -> optionPayout is absent

	post-condition: <"Non-contractual product types must be absent.">
		product -> contractualProduct only exists

func NewSingleNameEquityPayout: <"Function specification to create the equity payout part of an Equity Swap according to the 2018 ISDA CDM Equity Confirmation template.">
	inputs:
		security Security (1..1)
		masterConfirmation EquitySwapMasterConfirmation2018 (0..1)

	output:
		equityPayout EquityPayout (1..1)

	condition: <"Security must be equity (single name).">
		security -> securityType = SecurityTypeEnum->Equity //= underlier

	assign-output equityPayout -> returnType: <"Equity payout must inherit terms from the Master Confirmation Agreement.">
		masterConfirmation -> typeOfSwapElection

	assign-output equityPayout -> calculationPeriodDates: <"Equity payout must inherit terms from the Master Confirmation Agreement."> 
		masterConfirmation -> equityCalculationPeriod

	assign-output equityPayout -> paymentDates: <"Equity payout must inherit terms from the Master Confirmation Agreement."> 
		masterConfirmation -> equityCashSettlementDates

	assign-output equityPayout -> settlementTerms: <"Equity payout must inherit terms from the Master Confirmation Agreement."> 
		masterConfirmation -> settlementTerms

func ResolveQuantity: <"Function specification to resolve a payout quantity, specified as a resolvable quantity with inputs for the resolution, into a basic quantity with just a number and a unit.">
	inputs:
		resolvableQuantity ResolvablePayoutQuantity (1..1) <"The quantity to resolve.">
		date date (1..1)
	output:
		quantity Quantity (1..1) <"The resolved quantity, containing just a number and (optionally) a unit or currency.">



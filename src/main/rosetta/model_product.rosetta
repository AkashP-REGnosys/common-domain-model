Rosetta versionNumber "0.0.1"
FIX versionNumber "5.0 SP3"
FpML versionNumber "5.10"

//class Contract stereotype productReferenceData, contractualProduct <"A class to specify a contract object, which can be invoked either within the context of a financial transaction, or independently from it. It corresponds to the FpML Trade, although restricted to execution and post-execution contexts. Attributes also applicable to pre-execution contexts have been positioned as part of the ContractualHeader abstract class.">
//	[synonym FpML value Trade]
//{
//	contractIdentifier PartyTradeIdentifier (1..*) <"The contract reference identifier(s) allocated by the parties involved in the contract.">;
//		[synonym FpML value partyTradeIdentifier pathExpression "tradeHeader"] 
//	tradeDate date (1..1) <"The trade date. This is the date the trade was originally executed. In the case of a novation, the novated part of the trade should be reported (by both the remaining party and the transferee) using a trade date corresponding to the date the novation was agreed. The remaining part of a trade should be reported (by both the transferor and the remaining party) using a trade date corresponding to the original execution date.">;
//		[synonym FpML value tradeDate pathExpression "tradeHeader"]
//		[synonym ISO_20022 value TradDt]
//	clearedDate date (0..1) anchor <"If the trade was cleared (novated) through a central counterparty clearing service, this represents the date the trade was cleared (transferred to the central counterparty).">;
//		[synonym FpML value clearedDate]
//	contractualProduct ContractualProduct (1..1) <"The product information that is associated with the contract. The corresponding FpML construct is the product abstract element and the associated substitution group.">;
//	otherPartyPayment Payment (0..*) <"Other fees or additional payments associated with the contract, e.g. broker commissions, where one or more of the parties involved are not principal parties involved in the contract.">;
//		[synonym FpML value otherPartyPayment]
//	brokerParty Party (0..*) reference <"The party (or parties) that brokered the contract. In FpML, this element is specified as a reference to a party.">;
//		[synonym FpML value brokerPartyReference]
//	calculationAgent CalculationAgentModel (1..1) <"The ISDA Calculation Agent and the associated business center information. This information is represented in FpML via the CalculationAgent.model.">;
//	determiningParty Party (0..2) reference <"The ISDA Determination Party that is specified in the related confirmation as Determination Party.">;
//		[synonym FpML value determiningParty]
//	barrierDeterminationAgent Party (0..1) reference <"The party specified in the related confirmation as Barrier Determination Agent.">;
//		[synonym FpML value barrierDeterminationAgent]
//	hedgingParty Party (0..2) reference <"The ISDA Hedging Party that is specified in the related confirmation as Hedging, or if no Hedging Party is specified, either party to the contract.">;
//		[synonym FpML value hedgingParty]
//	collateral Collateral (0..1) <"The collateral terms associated with the contract.">;
//		[synonym FpML value collateral]
//	documentation Documentation (0..1) <"Defines the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.">;
//		[synonym FpML value documentation]
//	governingLaw GoverningLawEnum (0..1) <"Identification of the law governing the transaction.">;
//		[synonym FpML value governingLaw]
//	contractState ContractStateEnum (0..1) <"The state qualification of a contractual product, i.e. whether open or close. This attribute is not present as part of the FpML standard.">;
//}

abstract class ContractualHeader stereotype productReferenceData, contractualProduct <"An abstract class to specify the attributes that are common across contractual products and which apply across the pre-execution, execution and post-execution stages.">
{
	id string (0..1);
		[synonym FpML value id]
	productTaxonomy ProductTaxonomy (1..*) <"The product taxonomy value(s) associated with a contractual product.">;
	priceMultiplier number (0..1) <"The number of units of the underlying instrument represented by a single derivative contract.">;
		[regulatoryReference ESMA_MiFID_II regulation "RTS 27" article "3(2)(b)" provision "Trading venues and systematic internalisers shall publish for each market segment they operate and each financial instrument subject to the trading obligation (..) for financial instruments that do not have identifiers (...) the name and a written description of the instrument, including (...) price multiplier (...)."]
		[regulatoryReference ESMA_MiFID_II regulation "RTS 27" annex "Table 2" provision "Written description of financial instrument, if no identifier available (including the currency of the underlying instrument, price multiplier, price notation, quantity notation and delivery type)."]
}

//class ContractualProduct stereotype productReferenceData, contractualProduct one of <"This Rosetta class corresponds to the FpML Product substitution group.">
//{
//	bulletPayment BulletPayment (0..1) <"A bullet payment product.">;
//		[synonym FpML value bulletPayment]
//	bondOption BondOption (0..1) <"A bond option product.">;
//		[synonym FpML value bondOption]
//	capFloor CapFloor (0..1) <"A cap, floor or cap/floor product.">;
//		[synonym FpML value capFloor]
//	creditDefaultSwap CreditDefaultSwap (0..1) <"A credit default swap product.">;
//		[synonym FpML value creditDefaultSwap]
//	creditDefaultSwapOption CreditDefaultSwapOption (0..1) <"A credit default swap option product.">;
//		[synonym FpML value creditDefaultSwapOption]
//	fra Fra (0..1) <"A forward rate agreement product.">;
//		[synonym FpML value fra]
//	swap Swap (0..1) <"A swap product.">;
//		[synonym FpML value swap]
//	swaption Swaption (0..1) <"A swaption product.">;
//		[synonym FpML value swaption]
//}

//class ListedInterestRateDerivative extends ListedHeader stereotype productReferenceData, listedProduct <"The terms applicable to interest rate derivatives which are required to infer a price but are not abstracted through a product identifier.">
//{
//	effectiveDate date (1..1) <"The effective date, meaning the date on which the payoff terms start to be computed.">;
//	terminationDate date (1..1) <"The termination date.">;
//		[synonym FIX value MaturityDate tag 541]
//	spread number (0..2) <"The spread applicable to the floating interest rate reference.  There can be up to two float rates, as in the case of a basis swap.">;
//		[synonym FIX value Spread tag 218]
//		[synonym CFTC_Part43 value PN1 projection Price_Derivatives]
//		[synonym CFTC_Part43 value PN2 projection Price_Derivatives]
//	fixedRate number (0..2) <"The fixed rate. There can be up to two fixed rates, as in the case of a fix-fix swap.">;
//		[synonym CFTC_Part43 value PN1 projection Price_Derivatives]
//		[synonym CFTC_Part43 value PN2 projection Price_Derivatives]
//	fee Money (0..2) <"The ISDA specification for the Price Notation / Additional Price Notation specifies that there can be up to two fees for interest rate derivatives.">;
//		[synonym CFTC_Part43 value PN3 projection Price_Derivatives]
//		[synonym CFTC_Part43 value APN projection Price_Derivatives]
//}

abstract class ListedHeader stereotype productReferenceData, listedProduct <"An abstract class to holds the attributes that are common across listed products.">
{
	id string (0..1) anchor;
		[synonym FpML value id]
	productTaxonomy ProductTaxonomy (1..*) <"The product taxonomy value(s) associated with a product.">;
	productIdentifier ProductIdentifier (1..*) <"There can be several identifiers associated with a given product.">;
	description string (1..1) <"The product name.">;
		[synonym FpML value description]
	currency CurrencyEnum (0..1) <"The denomination currency of the instrument.">;
		[synonym FpML value currency]
	clearanceSystem string (0..1) scheme "clearanceSystemScheme" <"Identification of the clearance system associated with the transaction exchange.">;
		[synonym FpML value clearanceSystem]
}

class ListedProductPackageComponent stereotype preExecution, execution, postExecution <"Class which purpose is to associate a price and quantity qualification to each of the listed product components of a package transaction.">
{
	listedProduct ListedProduct (1..1);
	price Price (0..1);
	quantity Quantity (0..1);
}


class ListedProduct stereotype productReferenceData, listedProduct one of <"Product which terms are abstracted through a product identifier and are then publicly available through a central venue.">
{
	bond Bond (0..1);
		[synonym FpML value bond pathExpression "trade.bondOption"]
	convertibleBond ConvertibleBond (0..1);
		[synonym FpML value convertibleBond pathExpression "trade.bondOption"]
}

class PackageHeader stereotype productReferenceData
	[synonym FpML value PackageHeader]
{
	/*
	 * The FpML orderIdentifier has not been included, as it is positioned in a more generic manner, not specific to packages.
	 * Also, as a result of the before/after modelling approach, the originatingEvent element has also been omitted.
	 */
	packageIdentifier IssuerTradeId (0..1);
		[synonym FpML value packageIdentifier]
	packageType PackageTypeEnum (0..*) <"Classification of the package. FpML has defined a list of coding scheme values, packageTypeScheme. Different organisations might have different naming schemes for the packages so the multiplicity of unbounded is meant to support synonyms but it does not mean that a trade has multiple package types.">;
		[synonym FpML value packageTypeScheme]
	size number (0..1);
		[synonym FpML value size]
	packageInformation PackageInformation (0..1);
		[synonym FpML value packageInformation]
}

data rule PackageHeader_size <"FpML specifies the package size as a PositiveDecimal type.">
	when PackageHeader -> size exists
	then PackageHeader -> size >=0.0

//class PackageTransaction stereotype productReferenceData <"A bundle of financial products executed jointly in order to reduce transaction costs and for risk management purposes.">
//	[synonym FpML value TradePackage]
//{
	/*
	 * Remarks with respect to the FpML construct:
	 * 1- The FpML approval construct has not been integrated yet, as we need to confirm its applicability.
	 *    At this point it's unclear as to why there is a need for a set of approval status that are specific to such packages.
	 * 2- The FpML Trade Package provides the ability to specify either a trade, a tradeReferenceInformation or a tradeIdentifier; this is not specified at this point in Rosetta.
	 * 3- For applicability in pre-execution context, the packageComponent attribute has been introduced, as a way to apply side
	 */
//	packageHeader PackageHeader (0..1);
//		[synonym FpML value packageHeader]
//	packageComponent PackageComponent (1..*);
//	side SideEnum (0..1) <"The side (i.e. buy or sell) of the package component in the context of an RFQ, quote or order.">;
//		[synonym FIX value Side tag 54]
//	stopPrice number (0..1) <"The top price, per unit of quantity.">;
//		[synonym FIX value StopPx tag 99]
//}

//class PackageComponent stereotype productReferenceData  <"The set of product components which can be part of a package transaction.">
//{
//	contract Contract (0..*);
//		[synonym FpML value trade set contract when (ExecutionEvent or AllocationEvent or ExerciseEvent or ClearingEvent or IntermediationEvent or AggregationEvent or PartialTerminationEvent or TerminationEvent or PortfolioCompressionEvent) exists]
//	contractualProduct ContractualProduct (0..*);
//		[synonym FpML value trade set contractualProduct when (RequestForQuote or Order) exists]
//	listedProduct ListedProductPackageComponent (0..*);
//}

//choice rule PackageComponent_choice <"The contractualProduct is used in a pre-execution context, while the contract is used is an execution and post-execution context.">
//	for PackageComponent optional choice between
//	contract and contractualProduct

class ProductIdentifier stereotype productReferenceData <"The product identifier, composed of an identifier and a source.">
{
	productId string (1..1) scheme "instrumentIdScheme"  <"The product identifier.">;
		[synonym FIX value Symbol tag 55]
		[synonym FIX value SecurityID tag 48]
		[synonym FIX value SecurityAltID tag 455]
		[synonym FpML value productId]
		[synonym FpML value instrumentId]
		/*
		 * TODO - Enhance the CDM model to position the productId scheme value as an enumeration
		 * This require mapping syntax enhancement
		 */
//	productIdSource ProductIdSourceEnum (1..1) scheme "instrumentIdScheme" <"The product identifier source.">;
//		[synonym FIX value SecurityIDSource tag 22]
//		[synonym FIX value SecurityAltIDSource tag 456]
//		[synonym FpML value productId]
//		[synonym FpML value instrumentId]
}

class ProductTaxonomy stereotype productReferenceData <"The product taxonomy, which is composed of a taxonomy value and a taxonomy source.">
{
	taxonomyValue string (1..1) scheme "productTypeScheme" <"The taxonomy value. The taxonomy source can be associated with that attribute through the scheme value.">;
		[synonym FIX value CFICode tag 461]
		[synonym FIX value SecurityType tag 167]
		[synonym FIX value Product tag 460]
		[synonym FIX value ProductComplex tag 1227]
		[synonym FIX value TrdType tag 828]
		[synonym FIX value TrdSubType tag 829]
		[synonym FpML value productId pathExpression "trade.swap"]
		[synonym FpML value productType pathExpression "trade.swap"]
		[synonym FpML value primaryAssetClass pathExpression "trade.swap"]
	taxonomySource TaxonomySourceEnum (0..1) <"The taxonomy source. It can be omitted when the taxonomy source is represented as part of the scheme associated with the taxonomy value attribute.">;
}

data rule TaxonomySourceEnum_SecuritySubType <"FIX standard specifies that if SecuritySubType is set, then the SecurityType is also required as the former is a sub-type qualification of the latter.">
	when ProductTaxonomy -> taxonomySource = TaxonomySourceEnum.FIX_SecuritySubType
	then ProductTaxonomy -> taxonomySource = TaxonomySourceEnum.FIX_SecurityType

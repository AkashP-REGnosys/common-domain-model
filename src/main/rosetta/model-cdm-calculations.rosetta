namespace "org.isda.cdm"
version "%project.version%"

calculation FixedAmount <"2006 ISDA Definition Article 5 Section 5.1. Calculation of a Fixed Amount: The Fixed Amount payable by a party on a Payment Date will be: (a) if an amount is specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, that amount; or (b) if an amount is not specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Fixed Amount = Calculation Amount × Fixed Rate × Day Count Fraction.">
{
	fixedAmount number: calculationAmount * rate * dayCountFraction
	currencyAmount string: currencyAmount
}

arguments FixedAmount <"The set of arguments to calculate the FixedAmount.">
{
	calculationAmount: is InterestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> initialValue
	currencyAmount: is InterestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> currency
	rate: is InterestRatePayout -> rateSpecification -> fixedRate -> initialValue
    dayCountFraction: is InterestRatePayout -> dayCountFraction
}
 
calculation FloatingAmount <"2006 ISDA Definition Article 6 Section 6.1. Calculation of a Floating Amount: Subject to the provisions of Section 6.4 (Negative Interest Rates), the Floating Amount payable by a party on a Payment Date will be: (a) if Compounding is not specified for the Swap Transaction or that party, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Floating Amount = Calculation Amount × Floating Rate + Spread × Floating Rate Day Count Fraction (b) if “Compounding” is specified to be applicable to the Swap Transaction or that party and 'Flat Compounding' is not specified, an amount equal to the sum of the Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period; or (c) if 'Flat Compounding' is specified to be applicable to the Swap Transaction or that party, an amount equal to the sum of the Basic Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period plus the sum of the Additional Compounding Period Amounts for each such Compounding Period.">
{
	/*
	 * TODO - The below calculation needs to be refined for the case of negative interest rate and compounding
	 */
	 /*
	  * TODO - The ISDA 2006 doesn't make reference to the FpML floatingRateMultiplierSchedule.  
	  * Discussed resolution path with Jonathan & Harry is for Jonathan to ask the Rates Committee if the rate multiplier is actually used.
	  */
	floatingAmount number: calculationAmount * ( floatingRate + spread ) * dayCountFraction
	currencyAmount string: currencyAmount
}

arguments FloatingAmount <"The set of arguments to calculate the FloatingAmount.">
{
	calculationAmount: is InterestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> initialValue
	currencyAmount: is InterestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> currency
	floatingRate: is ResolveRateIndex( InterestRatePayout -> rateSpecification -> floatingRate -> floatingRateIndex ) -> rate

	/*
	 * TODO: question to group: why can a float rate calculation node in FpML contain multiple rate schedules?
	 */
	spread: is GetRateSchedule( InterestRatePayout -> rateSpecification -> floatingRate ) -> schedule -> initialValue
	dayCountFraction: is InterestRatePayout -> dayCountFraction
}



calculation DayCountFractionEnum._1_1 <"2006 ISDA Definition Article 4 section 4.16(a):	if “1/1” is specified, 1;">
{
	number: 1
}

arguments DayCountFractionEnum._1_1 <"The arguments to calculate the 1/1 day count fraction.">
{
	payout: is InterestRatePayout
}

calculation DayCountFractionEnum.ACT_ACT_ISDA <"2006 ISDA Definition Article 4 section 4.16(b): if “Actual/Actual”, “Actual/Actual (ISDA)”, “Act/Act” or “Act/Act (ISDA)” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365 (or, if any portion of that Calculation Period or Compounding Period falls in a leap year, the sum of (i) the actual number of days in that portion of the Calculation Period or Compounding Period falling in a leap year divided by 366 and (ii) the actual number of days in that portion of the Calculation Period or Compounding Period falling in a non-leap year divided by 365);">
{
	number: (daysInNonLeapPeriod / 365) + (daysInLeapYearPeriod / 366) 
}

arguments DayCountFractionEnum.ACT_ACT_ISDA <"The arguments to calculate the Actual/Actual (ISDA) day count fraction.">
{
	alias period CalculationPeriod( InterestRatePayout -> calculationPeriodDates )

	daysInLeapYearPeriod : is (period -> daysInLeapYearPeriod)
	daysInNonLeapPeriod : is (period -> daysInPeriod) - (period -> daysInLeapYearPeriod)
}

calculation DayCountFractionEnum.ACT_ACT_ICMA <"2006 ISDA Definition Article 4 section 4.16(c):	(c)	if “Actual/Actual (ICMA)” or “Act/Act (ICMA)” is specified, a fraction equal to “number of days accrued/number of days in year”, as such terms are used in Rule 251 of the statutes, by-laws, rules and recommendations of the International Capital Market Association (the “ICMA Rule Book”), calculated in accordance with Rule 251 of the ICMA Rule Book as applied to non US dollar denominated straight and convertible bonds issued after December 31, 1998, as though the interest coupon on a bond were being calculated for a coupon period corresponding to the Calculation Period or Compounding Period in respect of which payment is being made;">
{
	// TODO support the long initial and final stubs
 	//	number: daysInLongInitialPeriod / (daysInLongInitialRegularPeriod * periodsInYear) + 
	//			daysInPeriod / (daysInPeriod * periodsInYear) 
	//				+ (daysInLongFinalPeriod / (daysInLongFinalRegularPeriod * periodsInYear))
	
	number: daysInPeriod / (daysInPeriod * periodsInYear) 
}

arguments DayCountFractionEnum.ACT_ACT_ICMA <"The arguments to calculate the Actual/Actual (ICDA) day count fraction.">
{
	alias period CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	//alias initalPeriod LongInitialCalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	//alias finalPeriod LongFinalCalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	
	//daysInLongInitialPeriod : is initalPeriod -> daysInPeriod
	//daysInLongInitialRegularPeriod : is initalPeriod -> daysInRegularPeriod
	//daysInLongFinalPeriod : is finalPeriod -> daysInPeriod
	//daysInLongFinalRegularPeriod : is finalPeriod -> daysInRegularPeriod
	daysInPeriod : is period -> daysInPeriod
	periodsInYear : is PeriodsInYear( InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency) -> numberOfPeriods
}

calculation DayCountFractionEnum.ACT_365_FIXED <"'2006 ISDA Definition Article 4 section 4.16(d): If'Actual/365 (Fixed)', 1'Act/365 (Fixed)', 'A/365 (Fixed)' or 'A/365F' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365.">
{
	number:  daysInPeriod / 365
}

arguments DayCountFractionEnum.ACT_365_FIXED <"The arguments to calculate the Actual/365 (Fixed) day count fraction.">
{
	daysInPeriod : is CalculationPeriod( InterestRatePayout -> calculationPeriodDates ) -> daysInPeriod
}

calculation DayCountFractionEnum.ACT_360 <"'2006 ISDA Definition Article 4 section 4.16(e): if “Actual/360”, “Act/360” or “A/360” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
{
	number:  daysInPeriod / 360
}

arguments DayCountFractionEnum.ACT_360 <"The arguments to calculate the Actual/360 day count fraction.">
{
	daysInPeriod : is CalculationPeriod( InterestRatePayout -> calculationPeriodDates ) -> daysInPeriod
}

calculation DayCountFractionEnum._30_360 <"2006 ISDA Definition Article 4 section 4.16(f): if “30/360”, “360/360” or “Bond Basis” is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows:[[360 x (Y2 - Y1)] + [30 x (M2 - M1)] + (D2 - D1)]/360.">
{
	number: (360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360
}

arguments DayCountFractionEnum._30_360 <"The arguments to calculate the 30E/360 day count fraction.">
{
	alias period CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	
	startYear <"is the year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">: 
		is period -> startDate -> year
	
	endYear <"is the year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
		is period -> endDate -> year
	
	startMonth <"is the calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
		is period -> startDate -> month
	
	endMonth <"is the calendar month, expressed as number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
		is period -> endDate -> month
	
	endDay <"is the calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31 and D2, is greater than 29, in which case D2 will be 30">:
		is if period -> startDate -> day > 29 then Min( period -> endDate -> day, 30 ) else period -> endDate -> day
	
	startDay <"is the first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case, will be 30">:
		is Min( period -> startDate -> day, 30 )		
}

calculation DayCountFractionEnum._30E_360 <"2006 ISDA Definition Article 4 section 4.16(g): If '30E/360' or 'Eurobond Basis' is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows:[[360 x (Y2 - Y1)] + [30 x (M2 - M1)] + (D2 - D1)]/360.">
{
	number: (360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360
}

arguments DayCountFractionEnum._30E_360 <"The arguments to calculate the 30E/360 day count fraction.">
{
	alias period CalculationPeriod( InterestRatePayout -> calculationPeriodDates )

	startYear <"is the year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
		is period -> startDate -> year

	endYear <"is the year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
		is period -> endDate -> year
			
	startMonth <"is the calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
		is period -> startDate -> month
	
	endMonth <"is the calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
		is period -> endDate -> month
	
	endDay  <"is the first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30">:
		is Min( period -> endDate -> day, 30 )
	
	startDay <"is the calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30"> :
		is Min( period -> startDate -> day, 30 )
}

calculation DayCountFractionEnum._30E_360_ISDA <"2006 ISDA Definition Article 4 section 4.16(h): if “30E/360 (ISDA)” is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows: [[360 × (Y2 - Y1)]+[30 × (M2 - M1)] +(D2 - D1)]/360 ">
{
	number: (360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360
}
  
arguments DayCountFractionEnum._30E_360_ISDA <"The arguments to calculate the 30E/360 (ISDA) day count fraction.">
{	
	alias period CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	alias terminationDate ToAdjustedDate (InterestRatePayout -> calculationPeriodDates -> terminationDate)
	alias startDateIsInLeapYear IsLeapYear(period -> startDate -> year)
	alias endDateIsInLeapYear IsLeapYear(period -> endDate -> year)

	startYear <"is the year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
		is period -> startDate -> year

	endYear <"is the year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
		is period -> endDate -> year
	
	startMonth <"is the calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
		is period -> startDate -> month
	
	endMonth <"is the calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
		is period -> endDate -> month
	
	startDay <"is the first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless (i) that day is the last day of February or (ii) such number would be 31, in which case will be 30">:
		 is if ( (startDateIsInLeapYear = False and period -> startDate -> month = 2 and period -> startDate -> day = 28)
  				      or (startDateIsInLeapYear = True  and period -> startDate -> month = 2 and period -> startDate -> day = 29)
  				      or (period -> startDate -> day = 31)) = True 
  				    then 30 else period -> startDate -> day
	
	endDay <"is the calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless (i) that day is the last day of February but not the Termination Date or (ii) such number would be 31, in which case will be 30">:
		is if ( (endDateIsInLeapYear = False and period -> endDate -> month = 2 and period -> endDate -> day = 28)
				      or (endDateIsInLeapYear = True  and period -> endDate -> month = 2 and period -> endDate -> day = 29)
			          or (period -> endDate -> day = 31)
				      or (period -> endDate = terminationDate -> adjustedDate)) = True 
				    then 30 else period -> endDate -> day
}

calculation DayCountFractionEnum.ACT_365L <"is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365 (or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366). ">
{
	number:  daysInPeriod / daysInYear
}

arguments DayCountFractionEnum.ACT_365L
{
	alias period CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	alias endDateIsInLeapYear IsLeapYear(period -> endDate -> year)
	
	daysInPeriod <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made ">:
		is period -> daysInPeriod
	
	daysInYear <"365 or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366. ">: 
		is if (endDateIsInLeapYear = True) then 366 else 365
	
}

function CalculationPeriod( calculationPeriodDates CalculationPeriodDates ) <"2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.">
{
	startDate date;
	endDate date;
	daysInPeriod int;
	daysInLeapYearPeriod int;
}

function GetRateSchedule( floatingRateCalculation FloatingRateSpecification )
{
	schedule SpreadSchedule;
}

function ResolveRateIndex( index FloatingRateIndexEnum ) <"The function to specify that the floating rate index enumeration will be expressed as a number once the rate is observed.">
{
	rate number;
}

function ToAdjustedDate( terminationDate AdjustableOrRelativeDate )
{
	adjustedDate date;
}

function PeriodsInYear( frequency CalculationPeriodFrequency )
{
	numberOfPeriods int;
}


